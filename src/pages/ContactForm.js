import React, { useState } from "react";
import { FaMicrophone, FaMobileAlt, FaWhatsapp } from "react-icons/fa";
import "./ContactForm.css";

const ContactForm = () => {
  const [formData, setFormData] = useState({
    mobileNumber: "",
    message: "",
    termsAccepted: true, // By default checked
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [responseMessage, setResponseMessage] = useState("");

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === "checkbox" ? checked : value,
    });
  };

  // Speech Recognition API for message input
  const handleVoiceInput = () => {
    if ("webkitSpeechRecognition" in window) {
      const recognition = new window.webkitSpeechRecognition();
      recognition.lang = "hi-IN"; // Hindi language
      recognition.onresult = (event) => {
        setFormData((prev) => ({
          ...prev,
          message: event.results[0][0].transcript,
        }));
      };
      recognition.start();
    } else {
      alert("рдЖрдкрдХрд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╡реЙрдЗрд╕ рдЗрдирдкреБрдЯ рдХреЛ рд╕рдкреЛрд░реНрдЯ рдирд╣реАрдВ рдХрд░рддрд╛ред");
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.mobileNumber || !formData.message) {
      setResponseMessage("рдХреГрдкрдпрд╛ рд╕рднреА рдЖрд╡рд╢реНрдпрдХ рдлрд╝реАрд▓реНрдб рднрд░реЗрдВ!");
      return;
    }
    if (!formData.termsAccepted) {
      setResponseMessage("рдХреГрдкрдпрд╛ рд╡реНрд╣рд╛рдЯреНрд╕рдПрдк рдЕрдкрдбреЗрдЯ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреА рд╕рд╣рдорддрд┐ рджреЗрдВ!");
      return;
    }

    setIsSubmitting(true);
    setResponseMessage("");

    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL}/api/contact`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      const result = await response.json();
      if (response.ok) {
        setResponseMessage("рд╕рдВрджреЗрд╢ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬрд╛ рдЧрдпрд╛!");
        setFormData({ mobileNumber: "", message: "", termsAccepted: true });
      } else {
        setResponseMessage(result.message || "рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓! рдкреБрди: рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
      }
    } catch (error) {
      setResponseMessage("рдХреБрдЫ рдЧрд▓рдд рд╣реБрдЖ, рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
      console.error("Error:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="contact-form-container">
      <h2>рд╣рдорд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ</h2>
      <p className="subtitle">рдХреЛрдЪрд┐рдВрдЧ рд╕реЗ рдЬреБрдбрд╝реА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдлреЙрд░реНрдо рднрд░реЗрдВред</p>
      <form onSubmit={handleSubmit} className="contact-form">
        <div className="form-group">
          <label htmlFor="mobileNumber">
            <FaMobileAlt /> рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░ <span>*</span>
          </label>
          <input
            type="tel"
            id="mobileNumber"
            name="mobileNumber"
            value={formData.mobileNumber}
            onChange={handleChange}
            placeholder="рдЕрдкрдирд╛ 10-рдЕрдВрдХреАрдп рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВ"
            pattern="[0-9]{10}"
            maxLength="10"
            required
          />
        </div>

        <div className="form-group message-group">
          <label htmlFor="message">
            рд╕рдВрджреЗрд╢ <span>*</span>
          </label>
          <div className="message-input">
            <textarea
              id="message"
              name="message"
              value={formData.message}
              onChange={handleChange}
              placeholder="рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рдпрд╣рд╛рдВ рдЯрд╛рдЗрдк рдХрд░реЗрдВ..."
              rows="4"
              required
            />
            <button type="button" className="mic-button" onClick={handleVoiceInput}>
              <FaMicrophone />
            </button>
          </div>
        </div>

        <div className="form-group checkbox-group">
          <input
            type="checkbox"
            id="termsAccepted"
            name="termsAccepted"
            checked={formData.termsAccepted}
            onChange={handleChange}
          />
          <label htmlFor="termsAccepted">
            <FaWhatsapp /> рдореИрдВ рд╡реНрд╣рд╛рдЯреНрд╕рдПрдк рдЕрдкрдбреЗрдЯ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рд╣рдордд рд╣реВрдБред
          </label>
        </div>

        <button type="submit" disabled={isSubmitting} className={isSubmitting ? "submitting" : ""}>
          {isSubmitting ? "рднреЗрдЬрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ..." : "рд╕рдВрджреЗрд╢ рднреЗрдЬреЗрдВ ЁЯЪА"}
        </button>

        {responseMessage && (
          <p className={`response-message ${responseMessage.includes("рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ") ? "success" : "error"}`}>
            {responseMessage}
          </p>
        )}
      </form>

      <a
        href="https://wa.me/9135365331?text=рдореБрдЭреЗ%20рдХреЛрдЪрд┐рдВрдЧ%20рд╕реЗ%20рдХреБрдЫ%20рдмрд╛рддреЛрдВ%20рдХреЛ%20рдЬрд╛рдирдиреЗ%20рдХреЗ%20рд▓рд┐рдП%20рд╕рдВрдкрд░реНрдХ%20рдХрд░рдирд╛%20рдЪрд╛рд╣рддрд╛%20рд╣реВрдВред"
        className="whatsapp-link"
        target="_blank"
        rel="noopener noreferrer"
      >
        <FaWhatsapp /> WhatsApp рдкрд░ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ
      </a>
    </div>
  );
};

export default ContactForm;
